# Pak 256
# simuconf_base.tab : without livery informations
# simuconf.tab : with livery informations
# Japanese translation: Phystam (@Phystam_hnew)
# Low-Level values and constants
#
# This file can be found in many places:
#
# simutrans/config/simuconf.tab
# ~/simutrans/simuconf.tab (in the user directory, if singleuser_install != 0 or not present, first only pak-file path will be read)
# simutrans/pakfilefolder/config/simuconf.tab
# ~/simutrans/simuconf.tab (readed a second time, s.a.)
#


################################# General gameplay settings ################################

# Enforce vehicle (and other item) introduction dates?
# 0 = all vehicles available from start of the game
# 1 = use introduction dates
# 2 = (default) use settings during game creation, new games off
# 3 = use settings during game creation, new games on
# 年代設定の使用について
# 0 = 年代設定なし
# 1 = 導入時期のみ年代設定を使用
# 2 = (デフォルト) 現在のマップで使用; 新しいマップを始める時は設定しない
# 3 = 現在のマップで使用; 新しいマップを始める時にも設定する
use_timeline = 3

# The height of tiles for the double/half height tile system
# 緩急坂の設定; 8=緩坂を使用する 16=緩坂を使用しない

tile_height = 8

# 緩坂と急坂の変換定数; 通常は2を指定

height_conversion_factor = 2

# In beginner mode, all good revenuses are multiplied by a factor (default 1500=1.5)
# 初心者モードでの収入倍率; 数値/1000倍
beginner_price_factor = 1500

# These settings are used to calculate adjusted figures based on the length of the month. 
# To assume a base month length based on the settings in Simutrans-Standard, use 1,000
# base_meters_per_tile and 18 base_bits_per_month.
# 
# To assume a base month length of 24 hours (to allow various settings to be calibrated
# as if months were days), use a base meters per tile of 7500

base_meters_per_tile = 25
base_bits_per_month = 24

# This setting determines the rate at which jobs replenish. At the default, 100, all
# of a building's jobs replenish in exactly 1 month. At 200, it takes 2 months, and at
# 50, it takes 1/2 a month. This is useful when calibrating the month/year scale as
# against the hour/minute scale. If a month is timed as 6.4 hours (6:24), for example,
# a day (24 hours) consists of 3.75 "months". For jobs to replenish once every 24 hours,
# therefore, set this to 375 if the length of a month is 6:24.
# 従業員を全入換えするまでの時間; 100ならちょうど1ヶ月, 200なら2ヶ月。
# pak256において24時間に設定するには、1ヶ月が5:14:12なので、458に設定すれば良い。

job_replenishment_per_hundredths_of_months = 458

# Use beginner mode for new maps
# 新しいマップに初心者モードを使うかどうか
first_beginner = 0

# Size of the catchment area of a station/stop in tiles.
# This is for city buildings (mail and passengers) only.
# (In older versions, this was used for both city buildings and factories)
#
# Default: 2
# 旅客のタイル単位での集客領域。 20タイルなら500m
station_coverage = 20

# Size of the catchment area of a station/stop in tiles.
# This is for factories only.
# Default: 3
# 貨物の積み下ろし可能領域。 4なら100m
station_coverage_factories = 4

# The rate at which towns grow depends on their size. There are three different size categories:
# "Villages", "Cities" and "Capitals". The following settings define the thresholds (in numbers 
# of population) above which towns become "Cities" and "Capitals". Anything smaller than 
# city_threshold_size is a "Village".
# 都市レベルの閾値の設定。単位は住民数。
# "city"は市だが、日本で言う"町"になれる住民数に設定。(5000人)
# "capital"は首都だが、日本で言う"市"になれる住民数に設定。(50000人)
# 歌志内市のことは言わないでおいてください。

city_threshold_size = 5000
capital_threshold_size = 50000

# These values are used in the city generation algorithm to determine the maximum size of cities.
# max_city_size is the maximum size, in citizens, of any city at the point of generation.
# max_small_city_size is the size, in citizens, of any city other than a "big city" at the point of generation. 
# TIP: Set a lower number for these values the earlier that the game is started.
# 最大の都市サイズ、および「大都市以外のいかなる都市よりも大きい都市サイズ」の設定。単位は住民数。
# 小さめに設定しておくとマップ生成時間が短くなる。


max_city_size = 5000
max_small_city_size = 1500

# These values represent the rate at which towns grow. The raw growth number is *divided*
# by the growth factors; ergo, the lower the number, the higher the growth. Longer games
# should have less growth, whereas shorter games do better with more growth.
# 成長率の設定。乗算ではなく除算であることに留意。
# 長くプレイしたい時はこの値を大きめに設定し、短めにしたいときは小さめに設定すると良い。

growthfactor_villages = 400
growthfactor_cities = 300
growthfactor_capitals = 200

# Enable this to use the old algorithm for city growth from Standard.
# NOTE: The renovation_percentage in cityrules.tab should be increased if this be done.
# 標準より都市の成長を速めるかの設定。
quick_city_growth = 0

# Some passengers who are not able to find a route will be content to go to an alternative destination. 
# This is set separately for visiting passengers and commuting passengers. It can either be set in
# absolute figures using max_alternative_destinations_visiting and max_alternative_destinations_commuting,
# or set as a proportion of the total number of jobs and total level of visitor demand, using 
# max_alternative_destinations_per_visitor_demand_millionths and max_alternative_destinations_per_job_millionths.
# Using the relative settings is recommended, as this scales much better to the map size.
# 
# This is specified as the maximum number of alternative destinations, as the actual number for any
# given packet of passengers will be randomised between zero and this number. 
#
# This figure strongly affects how many passengers will travel, and also can have a significant effect on
# the computational load.
#
# ルートを見つけられなかった旅客は他の行き先を探します。
# 

max_alternative_destinations_per_visitor_demand_millionths = 500
max_alternative_destinations_per_job_millionths = 675

# Passengers have a maximum tolerance level for how long that they will spend travelling. 
# Passengers are generated in two groups: commuting and visiting passengers. Commuting 
# passengers travel to find work, whereas visiting passengers travel for other reasons, such
# as leisure, business (i.e., travel between workplaces) and shopping. Each of these two
# different types of passenger has a minimum and maximum journey time tolerance.
#
# The number is  expressed in minutes. For each packet of passengers, the number of minutes
# travelling time (including waiting time) that they are prepared to tolerate is randomised 
# between the minimum and maximum amount using a normal distribution, meaning that the numbers
# are more likely to be in the middle of the range than at either end.
# 旅客がどれだけ長い旅行時間に耐えられるかの設定。単位は分。
# 通勤と訪問客、それぞれに対して設定する。

min_visiting_tolerance = 120
range_visiting_tolerance = 5400
min_commuting_tolerance = 60
range_commuting_tolerance = 120

# The following settings determine the way in which individual packets of passengers decide
# what their actual journey time tolerance is, within the above ranges. The options are:
# 旅客の許容旅行時間の決め方の設定。
# 0 - Even distribution
# Every point between the minimum and maximum is equally likely to be selected
# どの時間も同様に確からしく選ばれる。
# 1 - Normal distribution (http://en.wikipedia.org/wiki/Normal_distribution)
# Points nearer the middle of the range between minimum and maximum are more likely 
# to be selected than points nearer the end of the ranges.
# 正規分布に従う。
# 2 - Positively skewed normal distribution (squared) (http://en.wikipedia.org/wiki/Skewness)
# Points nearer the a point in the range that is not the middle but is nearer to the lower
# end of the range are more likely to be selected. The distance from the middle is the skew.
# 正の傾斜正規分布に従う; 短時間側が多く選ばれる
# 3 - Positively skewed normal distribution (cubed)
# As with no. 2, but the degree of skewness (the extent to which the modal point in the range
# is nearer the beginning than the end) is considerably greater.
# 2より長時間側が多く選ばれる
# 4 - Positively skewed normal distribution (squared recursive)
# As with nos. 2 and 3 with an even greater degree of skew.
#
# 5 - Positively skewed normal distribution (cubed recursive)
# As with nos. 2, 3 and 4 with a still greater degree of skew.
#
# 6 and over - Positively skewed normal distribution (cubed multiple recursive)

random_mode_commuting = 3
random_mode_visiting = 5

# Settings for calibrating the revenue system
# 収入についての設定
#
# These settings calibrate the way in which revenue is calculated in the game. Changing
# them might make the game easier or harder, or, if they are changed in odd ways, make it
# behave eratically. Make sure to know what you are doing before changing these values.

#
# These settings calibrate the speed bonus. Note that, with Simutrans-Extended, unlike
# Simutrans-Standard, the speed bonus is based on the convoy or line's *average* speed between
# any two given stops, not the convoy's overall maximum speed. 
#
# All distances in these settings are measured in kilometres and calibrated using the
# meters_per_tile setting.
# スピードボーナスはStandardと違って車両またはその路線の「平均」速度で、車両の最高速度ではありません。
# これらの設定についてはmeters_per_tileを用いてキャリブレーションされたゲーム内距離(km)が単位になります。
#
# min_bonus_max_distance is the distance below which the speed bonus (or penalty) does not
# apply. Below this distance, goods pay the same no matter what the average speed.
# min_bonus_max_distance はスピードボーナス収入が発生する最小の距離(km)
#
# median_bonus_distance is the distance at which 100% of the speed bonus/penalty applies. 
# At anything between min_bonus_max_distance and median_bonus_distance, a scaled proportion
# of the speed bonus applies. For example, if the min_bonus_max_distance was 10, and the 
# median_bonus_distance was 110, then, for a journey of 50 tiles, 50% of the speed bonus or
# penalty would apply. median_bonus_distance is optional: if it is not specified, or set to
# 0, it will be calculated as the mid point between min_bonus_max_distance and
# max_bonus_min_distance.
# median_bonus_distance は100%のスピードボーナス収入が支払われる距離。
# min_bonus_max_distanceとmedian_bonus_distanceの間の距離では、スピードボーナスは距離に比例して
# 支払われます。
#
# max_bonus_min_distance is the distance above which the rate of the speed bonus increases
# no further. In other words, the rate of the speed bonus (or penalty) keeps increasing with
# the distance, until it reaches the max_bonus_min_distance, after which it remains steady.
# max_bonus_min_distanceはスピードボーナスがこれ以上上がらない最小の距離。
#
# max_bonus_multiplier_percent is the percentage of the speed bonus that applies at or above
# the distance specified in max_bonus_min_distance. So, if the speed bonus rating was 10%, the
# distance exceeded the max_bonus_min_distance value, and the max_bonus_multiplier_percent was
# set to 200, the speed bonus rating would effectively be 20% for that journey.
# Between the median_bonus_distance and the max_bonus_min_distance, a scaled proportion applies.
# So, if, for example, the median_bonus_distance was 100, the max_bonus_min_distance was 1,100
# the actual distance 500, and the max_bonus_multiplier_percent 200, the speed bonus rating
# would be increased by half of the multiplier, or 150%.

min_bonus_max_distance = 1
median_bonus_distance = 160
max_bonus_min_distance = 1000
max_bonus_multiplier_percent = 50

# meters_per_tile represents the length of each tile in meters. 
# The default is 250.
#
# This setting is used for calculating journey times, revenues, maintenance costs, comfort and
# catering values.
#
# Note that, in versions of Simutrans-Extended (then known as Experimental) before 10.0, the setting "distance_per_tile"
# was used instead. That setting was calculated in tens of meters. If "distance_per_tile" is
# specified in simuconf.tab, it will be converted to meters_per_tile by the game.
# meters_per_tileは1タイルの一辺の長さ(m)
# 収入や建設費用など多くの箇所に効いてきます。pak256ではmeters_per_tile=25が標準です。

meters_per_tile = 25

# These next settings affect the interaction between comfort and revenue in Simutrans. Comfort only
# affects passenger traffic, for obvious reasons. Passengers have a certain level of comfort that
# they will tolerate for certain distances. All comfort ratings are in the range of between 0 and
# 255. At the tolerable level, the revnue is unaffected. At above the tolerable level, a luxury
# bonus is applied. At below the tolerable level, a discomfort penalty is applied. The values can
# be set to anything, but, to reflect real life, it is suggested that the discomfort penalty is
# significantly higher than the luxury bonus.
# 快適度と収入の関係
# 快適度は旅客交通にのみ適用されて、旅客はその距離に応じて許容できる一定の快適度(0-255)を要求します。
# 許容レベルと快適度が同等であれば収入には影響を与えませんが、
# 許容レベルより快適度が下回れば「不快」ペナルティが課され、上回れば「快適」ボーナスが入ります。
# これらの値はいかようにも設定できますが、現実世界を反映するためには、「不快」ペナルティを「快適」ボーナス
# より明らかに大きくしておくほうが良いでしょう。
#
# tolerable_comfort_short is the tolerable comfort rating of a vehicle (0 - 255) for a journey of no
# more than tolerable_comfort_short_minutes.
# tolerable_comvort_short はtorelable_comfort_short_minutesより長い旅行の時の許容快適度.
#
# tolerable_comfort_median_short is the tolerable comfort rating of a vehicle for a journey of no more
# than tolerable_comfort_median_short minutes.
#
# tolerable_comfort_median_median is the tolerable comfort rating of a vehicle for a journey of no more
# than tolerable_comfort_median_median minutes.
#
# tolerable_comfort_median_long is the tolerable comfort rating of a vehicle for a journey of no more
# than tolerable_comfort_median_long minutes.
#
# tolerable_comfort_long is the tolerable comfort rating of a vehicle for a journey of at least
# tolerable_comfort_long minutes.
#
# For any journeys of a time between any of the values, a scaled proportion is taken. 
# 
# Note that the impact of comfort on revenue decreases with journey time.
# It is at its maximum level down to tolerable_comfort_median_long_minutes, after which it gradually
# reduces to 20% of its maximum at tolerable_comfort_short_minutes, and does not decrease further
# thereafter. 

# l:00h, comfort=10 -> min=15
tolerable_comfort_short_minutes=60
tolerable_comfort_short=40

# 3:00h comfort=10 -> min=30
tolerable_comfort_median_short_minutes=180
tolerable_comfort_median_short=80

# 6:00h comfort=10 -> min=45
tolerable_comfort_median_median_minutes=360
tolerable_comfort_median_median=120

# 12:00h comfort=10 -> min=60
tolerable_comfort_median_long_minutes=720
tolerable_comfort_median_long=180

# 24:00h comfort=10 -> min=120
tolerable_comfort_long_minutes=720
tolerable_comfort_long=240

# max_luxury_bonus_differential is the maximum number of comfort rating points above the tolerable level
# that affects the luxury bonus. Anything beyond that, and further added luxury makes no difference to the
# revenue.
#
# max_luxury_bonus_percent is the percentage increase in revenue from the maximum level of luxury specified in
# max_luxury_bonus_differential. So, if the tolerable comfort level for any given travelling time was 100, the 
# max_luxury_bonus_differential 50, and the max_luxury_bonus_percent 50, then the revenue would increase up to
# 50% beyond the normal revenue for additional comfort up to 150, but would not increase further with any increase
# in comfort beyond 150. 

max_luxury_bonus_differential=0
max_luxury_bonus_percent=0

# The discomfort penalty works in exactly the same way as the comfort bonus. max_discomfort_penalty_percent is the
# percentage decrease in revenue from the maximum level of discomfort specified in max_discomfort_penalty_differential. 

max_discomfort_penalty_differential=0
max_discomfort_penalty_percent=0

# These settings control the revenue that can be earned from catering and travelling post offices. Note that catering
# vehicles on a convoy also increase the comfort by a small amount, which has an indirect effect on the revenue. These
# settings do not affect that: these settings affect the revenue earned from the catering itself: i.e., by selling food
# and drink. 
#
# catering_min_minutes is the shortest journey time that will provide any catering revenue. At any value below that, 
# passengers will not bother to buy any food or drink at all. 
#
# catering_level1_minutes is the journey time at which any convoy with a catering level of 1 or higher will earn, per
# passenger, the number of Simu-cents (1/100th of a Simucredit) specified in catering_level1_max_revenue. 
# 
# The same applies for each subsequent catering level: in other words, higher catering levels only earn more than lower
# catering levels on journeys of at least the catering_levelX_minutes (where X is the catering level in question).
#
# Between each level, the a scaled proportion is applied. So, for example, if catering_min_minutes is 100, 
# catering_level1_minutes is 200, and the actual journey time is 150 minutes, then, any convoy with a catering level 
# of at least 1 will earn 50% of the amount specified in catering_level1_max_revenue per passenger. 

catering_min_minutes=10
catering_level1_minutes=30
catering_level1_max_revenue=30000
catering_level2_minutes=90
catering_level2_max_revenue=60000
catering_level3_minutes=120
catering_level3_max_revenue=100000
catering_level4_minutes=180
catering_level4_max_revenue=150000
catering_level5_minutes=210
catering_level5_max_revenue=300000

# Travelling post office revenue is simpler than catering revenue. For every journey that mail makes in a convoy containing
# a travelling post office vehicle (that is, a mail carrying vehicle with a catering level above zero) where the journey time
# exceeds that specified in tpo_min_minutes, the trip will earn the amount specified in tpo_revenue, multiplied by the number
# of mail bags carried, in addition to the ordinary revenue.

tpo_min_minutes=90
tpo_revenue=300

# These settings relate to private car use. See /config/privatecar.tab for
# the configuration of private car ownership for different years.
#
# "Always prefer car percent" is the percentage of drivers who prefer to use their
# car even if walking or taking public transport is faster. The default is 10% 
#
# "Congestion density factor" determines the way in which congestion is calculated.
# If this number is 0, a very simple system is used for calculating congestion.
#
# If this number is > 0, but < 32, this figure represents the factor by which the 
# population density (in citizens per tile) is divided to get a factor multiplied 
# by the number of cars per tile per month to get the congestion figure. In simple
# terms, the lower this number, the easier that it will be for cities to register 
# as congested, and the more likely that it is that passengers will opt for public 
# (i.e., the player's) transport instead. 
#
# If this number is > 32, a system based on data from the TomTom Congestion Index
# (http://www.tomtom.com/lib/doc/congestionindex/2013-0322-TomTom-CongestionIndex-2012-Annual-EUR-mi.pdf)
# is used: the number of private car trips per hour is divided by the length of all
# roads in the city in kilometres then multiplied by the congestion density factor
# to get a percentage figure. When this figure is calculated for all British cities
# in the TomTom Congestion Index in 2012, the average is 141 (1.41). 
# 自家用車の設定
# privatecar.tabにも自家用車に関する設定があり、そちらの方には自家用車の時代変化を記述すること。
#
# Always_prefer_car_parcentは移動には常に車を使う人の割合(%)で、車で行かなくてもいいくらい
# 近い距離の移動/公共交通機関を使ったほうが早くても車を使う。
# congestion_density_factorは混雑度を計算する方法を決定する。
# 0<C<32なら、


always_prefer_car_percent = 6
congestion_density_factor = 141

# This setting gives the maximum time that passengers are prepared to wait for their
# transport. The setting is divided by speed bonus value to get the number of minutes.
# In pak128.Britain and pak128, the default speed bonus value for passengers is 18. So,
# at the default wait time of 2,700, the maximum time that passengers are prepared to
# wait is 2,700 / 18 = 150 minutes, or two and a half hours. 
#
# The same applies for other sorts of goods: for example, the speed bonus value for
# mail is 15. So, with a passenger_max_wait of 2700, mail would wait for 180 
# minutes before being discarded.
# 
# This is also subject to a maximum of thrice the estimated journey time for the
# whole journey, except where thrice the estimated journty time is less than 1/12th
# of this value.

passenger_max_wait = 19440

# This is the minimum time in minutes that passengers or goods may wait at an airport.
# This simulates the need for check-in, security checks, etc., that makes travelling by
# air a slower process at the boarding stage than transport by other means such as road
# or rail. Setting this to 0 will make air transport behave like any other transport.

min_wait_airport = 45

# If this setting is set to 1, halts will have different capacities for each type of goods.
seperate_halt_capacities = 1

# This setting determines the extent to which cities should be built far away from
# other cities when the map is first generated. The higher the number, the further
# away from each other that the cities are built. This is introduced in Simutrans-Extended
# 9.0. It replaces Simutrans-Standard's setting of "minimum_city_distance".

city_isolation_factor = 48

# Minimum distance of a city attraction to other special buildings
special_building_distance = 2

# Passengers will walk to their destination if it is close enough, rather than use
# players' transport or private cars. This parameter defines how close that close
# enough is. It is expressed in hundreds of meters (or tenths of kilometres), so
# the default setting of 15 means that passnegers will walk to their destination if
# it is within 1.5km of their origin.

max_walking_distance_km_tenth = 15

# This is the speed in km/h at which passengers will walk. The average walking speed
# is 5km/h, and this is the default. However, there is much to be said for a lower
# setting than this to take into account the fact that many walking journeys are
# not in a straight line.

walking_speed = 4

# This setting determines the relationship between the number of private car trips
# generated and (1) the congestion recorded in the cities; and (2) the number of
# private car graphics that appear in the game. This is intended to simulate
# vehicle occupancy rates. The higher the occupancy rate, the fewer cars that
# there will be (and therefore the less congestion that there will be) for
# any given number of people making trips by car. 
#
# The correct setting for the UK is 11: different countries might have higher or
# lower occupancy rates.
#
# Range: 0 - 16.
# Setting	-	Occupants per car
#	0		-	[No cars]
#	1		-	200
#	2		-	100
#	3		-	50
#	4		-	40
#	5		-	20
#	6		-	10
#	7		-	5
#	8		-	4
#	9		-	3
#	10		-	2
#	11		-	1.6 * UK average
#	12		-	1.5
#	13		-	1.3
#	14		-	1.2
#	15		-	1.1
#	16		-	1.0

citycar_level = 11

# These settings determine how players pay for running on the ways of other players. 
#
# toll_runningcost_percentage apportions the specified percentage of the convoy's
# running cost to the player on whose way the convoy is being run.
#
# toll_waycost_percentage apportions the specified percentage of the way tile's
# monthly maintenance cost (and, for electrically powered convoys, also the specified 
# percentage of way objects' monthly maintenance cost) from the convoy for every
# tile of the other player's way over which it passes.
#
# toll_revenue_percentage apportions the specified percentage of the convoy's 
# revenue according to the proportion of the journey that the convoy has undertaken
# on the specified player's way. For example, if way_toll_revenue_percentage is set
# to 50, and the convoy travels half its journey over another player's way, that
# other player will receive 25% of the total revenue for that journey.

toll_runningcost_percentage = 0
toll_waycost_percentage = 10
toll_revenue_percentage = 30

# These settings determine how players pay for landing/docking in the ports
# of other players.
# 
# airport_toll_revenue_percentage is the percentage of the revenue of
# a trip by aircraft charged to a player landing at another player's
# airport.
#
# seaport_toll_revenue_percentage is the precentage of the revenue
# of a trip by sea charged to a player docking at another player's
# sea port.

airport_toll_revenue_percentage = 20
seaport_toll_revenue_percentage = 15

# If this is set to 1, players will not be charged to use roads owned by the public
# service player. This does not affect other sorts of ways. 
# Default: 0

toll_free_public_roads = 1

# If a player has allowed access to its roads to the public player, private
# cars may use those roads. They will pay a toll to do so for every kilometre.
# This is the amount (in simucents: 100 = 1 simucredit; 1 = 1 simucent)
# that the player who owns the road will receive for each km traversed by a
# private car on that road.

#this value is calculated besed on the toll from Kawaguchi-IC to Hachinohe-IC.
#basically the toll is 12900 yen and the distance is 631.4 km.
private_car_toll_per_km = 2000

# If this is set to 1, any road built in a town will be adopted
# by that town (set to unowned), meaning that the building player
# will not have to maintain it, but does not have exclusive use
# of the way, and cannot prevent other players from upgrading/
# downgrading/removing it. Setting it to 0 will disable this 
# feature.

towns_adopt_player_roads = 1

# If this is set to 1, any player may transfer any way tile or stop to the ownership
# of the public player. If this is set to 0, only the public player may transfer
# stops and way tiles to public ownership.
# Default: 1 (which replicates the behaviour in Standard)

allow_making_public = 0

# This setting determines whether aircraft can land and take off
# at airports without control towers. 1 = yes; 0 = no.

allow_airports_without_control_towers = 0

# If this is set to 2, single height bridges cannot be built over ways.

way_height_clearance = 2

################################## Industry settings #################################

# allow all possible supplier to connect to your factories?
# This will also affect savegames!
# best to leave it in default position. (only on for simuTTD)
crossconnect_factories = 0

# how big is the chance for cross-connections in percent (new in 99.10)
# (100% will give nearly the same results as crossconnect_factories=1)
crossconnect_factories_percentage = 15

# with this switch on (default), overcrowded factories will not recieve goods any more
just_in_time = 1

# True if substations ("transformers") are allowed to be built underground (default)
allow_underground_transformers = 1

# How much is the total electric power available (in relation to total production) 
# in parts per thousand. 1000 = 100% and default for Simutrans-Extended.
electric_promille = 1200

# powerlines
cost_transformer = 23000
cost_maintain_transformer = 5800

# electricity power revenue
power_revenue_factor_percentage = 1000

# Minimum distance between factories (in tiles)
# Note that this applies as between *any* pair of factories, not just factories
# that are connected to each other.
min_factory_spacing = 2

# Maximum distance for connected factories
# If percentage>0, it will be in percent of the largest map dimension
# percentage also over-rides the absolute value (which is in tiles)
max_factory_spacing_percentage = 25
#max_factory_spacing = 1280

# Some factories have a retirement date, after which they are obsolete. After
# that date, factories may close down (random chance each month). After the number
# of years stipulated below, factories have a 100% chance of closing down. The
# chance increases the closer to this value that factories get.
max_years_obsolete = 32

# number of periods for averaging the amount of arrived pax/mail at factories for boost calculation
# one period represents a fixed interval of 2^18 ms in-game time
# value can range from 1 to 16, inclusive; 1 means no averaging; default is 4
factory_arrival_periods = 4

# whether factory's passenger and mail demands are enforced or not; the default is on (1).
factory_enforce_demand = 1

# How much amount in transport is sent before further distribution stops
# This is only enabled when "just_in_time" is enabled
# The limit is given in percent of factory storage (0=off)
# 
# This number is scaled to the ratio
# of the time that it takes the industry to consume its stock to the average
# lead time for new deliveries. Values of slightly over 100% are recommended.
maximum_intransit_percentage = 110

# This is the fraction of the way's total wear capacity below which
# the way will count as degraded and be automatically renewed or,
# if the player has insufficient money or auto-renewal has been
# disabled for the way in question, will enter a degraded state
# in which the speed limit will be reduced. (At a state of 0,
# the way will become totally impassable). 
# Default: 7 (approx. 14%). 

way_degradation_fraction = 7

# These two settings determine the default relationship between
# the weight of vehicles and their way wear factors. Air and
# road vehicles use the "road_type", and all others apart from
# maglev and water (which are hard coded to zero) use the 
# "rail_type". This only applies to vehicles whose way wear
# factor is not specified in the individual vehicle definitions.
# The default for road is 4, based on the "forth power law": 
# http://www.pavementinteractive.org/article/equivalent-single-axle-load/
# The default for rail is 1.
#訳者注: "forth power low"は第四力の法則ではなく"力の4乗則"

way_wear_power_factor_road_type = 4
way_wear_power_factor_rail_type = 1

# This is the setting to calibrate the way wear system. This
# is only effective for vehicles which do not have their way
# wear factor set in their individual .dat files. For an
# explanation of the standard axle load (in tonnes), see
# the link above.
# The default is 8, which is the UK standard for road.

standard_axle_load = 8

# This is the way wear factor exerted on roads by all
# "citycars" (that is, the automatically generated
# private road traffic) in the game, measured in 
# 1/10,000ths of a standard axle load. 
# Default = 2

citycar_way_wear_factor = 2

################################## Finance settings #################################

# Starting money of the player. Given in Credit cents (1/100 Cr)
starting_money = 200000000

# Maintenance costs of buildings
# This is also in credit cents
maintenance_building = 1800

# first stops: the actual cost is (cost*level*width*height*km/tile)
cost_multiply_dock = 750
cost_multiply_station = 600
#stop is cheap; but on other hand max level is 4
cost_multiply_roadstop = 400
cost_multiply_airterminal = 1000
#used for all extra buildings
cost_multiply_post = 500

# cost for depots
# Multiplied by the level
# 7,0000<=1000,0000yen
cost_depot_rail = 7000
cost_depot_road = 7000
cost_depot_ship = 7000
cost_depot_air  = 7000

# other construction/destruction stuff
# The following are adjusted by meters_per_tile:
cost_alter_land=140000
cost_set_slope=140000
cost_remove_tree=3000
cost_buy_land=1400
cost_multiply_remove_haus=5000
cost_multiply_remove_field=400000

# The following aren't adjusted by meters_per_tile:
cost_found_city=281600000
cost_multiply_found_industry=500000
# Multiplied by headquarters "level"
cost_multiply_headquarter=10000

# Forge cost settings
# 
# The forge cost settings determine the cost of building a new way, in
# SimuCents per kilometre. This cost is charged when building a new
# way of a specified type on a tile, but not when upgrading an existing
# way of that same type. This therefore makes it cheaper to upgrade ways
# than build new ones. This cost is added to the base cost of the ways
# specified in the .dat files.

# forge_cost_road = 10000
# forge_cost_track = 20000
# forge_cost_water = 40000
# forge_cost_monorail = 20000
# forge_cost_maglev = 30000
# forge_cost_tram = 5000
# forge_cost_narrowgauge = 10000
# forge_cost_air = 25000
# forge_cost_road = 176000
# forge_cost_track =176000
# forge_cost_water =176000 
# forge_cost_monorail =176000
# forge_cost_maglev =176000
# forge_cost_tram =76000
# forge_cost_narrowgauge =176000
# forge_cost_air = 176000
forge_cost_road = 112640
forge_cost_track =70400
forge_cost_water =176000 
forge_cost_monorail =70400
forge_cost_maglev =150800
forge_cost_tram =35200
forge_cost_narrowgauge =25200
forge_cost_air = 176000

# The parallel ways forge cost percentage is the percentage of the
# forge cost that is charged when building one way of each type
# adjacent to an already existing way of that same type. For example,
# if this number is set to 50 for roads, the forge cost (as specified 
# above) of building one road immediately adjacent to another is 50%
# of the full value.

parallel_ways_forge_cost_percentage_road = 50
parallel_ways_forge_cost_percentage_track = 35
parallel_ways_forge_cost_percentage_water = 75
parallel_ways_forge_cost_percentage_monorail = 35
parallel_ways_forge_cost_percentage_maglev = 40
parallel_ways_forge_cost_percentage_tram = 85
parallel_ways_forge_cost_percentage_narrowgauge = 35
parallel_ways_forge_cost_percentage_air = 85

# Insolvency and debt settings
#
# These settings allow what happens when the player runs out of money and goes
# into the red to be customised. 
#
# "interest_rate_percent" is the annual interest rate (charged monthly) on all
# overdraft debt (i.e., on all negative account balances). It can be between 0
# and 255. 
# 
# "allow_bankruptcy" determines whether, when the player is deemed to have been
# insolvent for more than a certain period, the player should be declared
# bankrupt and the game over. 0 = no, 1 = yes.
# 
# "allow_purchases_when_insolvent" determines whether, if the player's bank
# balance falls below the player's credit limit (shown in the finance window),
# the player will be unable to spend any new money on capital items (excluding
# bulldozing) until the player has come back within the credit limit again.
# 0 = no, 1 = yes.
#
# To revert to the behaviour of Simutrans standard, set interest_rate_percent to
# 0, set allow_bankruptsy to 1, and set allow_purchases_when_insolvent to 1.

interest_rate_percent = 1
allow_bankruptcy = 1
allow_purchases_when_insolvent = 0	

# This is a compatibility setting for Simutrans-Standard. Because, in
# Simutrans-Standard, the speed bonus data (in speedbonus.tab) are based on the
# *maximum*, rather than the *average* speed of the vehicles, the speeds in
# speedbonus.tab will be too high. Use this setting to reduce them if playing 
# with an incompatible pakset. For paksets produced with Simutrans-Standard in
# mind, the setting should be somewhere between 40-50. For compatible paksets,
# the setting should be 100. 

speed_bonus_multiplier_percent=100

# These settings determine the population, visitor demand, jobs and mail per "level" of building.
# Each of these things can be set independently in the buildings' .dat files, but for older paksets
# or paksets from Standard, only a "level" will be supplied, so these conversion factors are
# important in those cases.
population_per_level = 4
visitor_demand_per_level = 4
jobs_per_level = 3
mail_per_level = 1

# These settings determine the number of passenger trips that each person makes per game month
# and the number of items of mail that each unit of mail demand produces per month, in 1/100ths.
# This does *not* include onward and return trips, however, and is *before* adjustment for the
# meters per tile and bits per month scales.
passenger_trips_per_month_hundredths = 60
mail_packets_per_month_hundredths = 5

# This setting determines the maximum number of onward trips that passengers may make on a journey.
# The actual number of onward trips for any given packet of passengers is a random number of anywhere
# between 1 and this figure. This is only applicable if passengers are in fact going to make an onward
# trip, the chance of which is determined by a different setting (see below).
max_onward_trips = 3

# This figure determines how likely that it is that passengers will make any onward trips at all. It
# is expressed in percentage terms.
onward_trip_chance_percent = 25

# This is the chance, in percentage, that any given passenger journey will be a commuting trip. Any
# trip that is not a commuting trip is classed as a visiting trip.
commuting_trip_chance_percent = 67

# disable companies from making ways public with the appropiate tool
# even when disabled companies can still make stops public
# does not affect public service provider player
disable_make_way_public = 0

 # The number of months of maintainance that the make public tool costs to use
cst_make_public_months = 60

################################### Time settings ################################

# Enforce vehicle introduction dates?
# 0 = all vehicles available from start of the game
# 1 = use introduction dates
# 2 = (default) use settings during game creation

use_timeline = 2

# Default starting year of the game
# Must be between 1492 and 2050
# Pak128.Britain-Ex has vehicles from 1750 onwards.

starting_year = 1978

# Starting month of the game for people who want to start in summer (default 1=January)
starting_month = 4

# Should month be shown in date?
# (0=no, 1=yes, 2>=show day in japan format=2, us format=3, german=4, japanese no season=5, us no season=6, german no season = 7, hours/minutes scale = 8)
# This is most useful, if you use longer months than the default length (see below)
# The hours/minutes scale shows the time in hours/minutes as used for determining journey times and other short times. It is the recommended setting. 
show_month = 8

# Global time multiplier (will be save with new games)
# 2^bits_per_month = duration of a game month in milliseconds real time
# default is 18. For example, 21 will make the month 2^3=8 times longer in real time
# production and maintainance cost will be adjusted accordingly.

bits_per_month = 24

# This setting determines whether passengers can reach their journies by walking
# between stops en route. If this setting is false, passengers will walk from their
# origin to the start station/stop and from the destination station/stop to their
# destination, but will not walk between intermediate stops, even if the distance
# between the intermediate stops is the same as or less than the distance between
# their origin and the starting stop. If this setting is set to true then passengers
# will walk between intermediate stops as well as from their origin to the first stop 
# on their journey. 
#
# Note that, with the setting enabled, there is no means of preventing passengers from
# walking between two or more consecutive stops or from walking as the first or last stage
# in their journey, such that their overall walking distance is greater than the catchment
# area would be permissible for walking for the stop to or from which they are walking.
# This setting might also have the incidental effects of allowing a stop to take passengers
# from an area not covered by that stop's coverage radius, but covered by the radius of 
# another stop (possibly owned by a rival player) in the nearby vicinity, and of passengers
# walking instead of using player transport in some cases.
#
# 0 = off; 1 = on. Default: off.

allow_routing_on_foot = 1

################################ Road Settings ###################################

# (=1) drive on the left side of the road
drive_left = 1

# Draw the signals on the left.
# (In Pak128.Britain, this must be set to 0 until the signals are re-drawn to suit
# this setting).
signals_on_left = 1

# The below sections deal with the types of roads built automatically by the game,
# both when the map starts and during the game (in the case of city roads). Different
# kinds of roads are available at different times. The types of roads specified must
# be available in a .pak file. If a specified type is unavailable, Simutrans will
# guess which road it should be using.

# City roads timeline. Format examples: 
# city_road[0]=name,1900,1920
# city_road[1]=name2,1921,1950

city_road[0]=way_road_cityroad,1700,2300

# Intercity roads timeline. Format examples: 
# intercity_road[0]=name,1900,1920
# intercity_road[1]=name2,1921,1950

intercity_road[0]=way_road_cityroad,1700,2300
# intercity_road[0]=bridleway,1700,1784
# intercity_road[1]=dirt_road,1785,1824
# intercity_road[2]=macadam_road,1825,1902
# intercity_road[3]=tarmac_road,1903,1925
# intercity_road[4]=tarmac_city_road,1926,1932
# intercity_road[5]=hr-asphalt-road-light,1933,1938
# intercity_road[6]=hr-asphalt-road-medium,1939,1996
# intercity_road[7]=sma-road-medium,1997,2300

# Max. length of intitial intercity road connections
# If you want to speed up map creation, lower this value
# If you want more initial intercity roads, raise this value

intercity_road_length = 320

# This is the maximum number of tiles that a road, river or canal
# that is a public right of way may be diverted for an existing
# public right of way to be deleted. Diversion allows players to
# change the course of public rights of way to accomodate, for
# example, railways whilst protecting their integrity.

max_diversion_tiles = 16

# Towns have speed limits. This value, expressed in km/h, is the speed limit
# value for urban roads in the game.
# Default: 50
# Set to 0 to disable town speed limits (roads will have their base speed limits in towns).
# This only applies to roads.
# 48 km/h = 30mph

town_road_speed_limit = 30

################################ Vehicle settings ##############################

# These settings determine how vehicles take corners, for each individual type of way.  They
# only apply to vehicles that use fixed ways (road, rail, monorail, etc.), and not aircraft or
# ships. Note that these settings have changed substantially from versions earlier than 11.
# 
# corner_force_divider_[way type]: The maximum force as a proportion of G (gravitational force)
# that it is permissible for vehicles of this way type to experience when taking a corner. This
# number is expressed as a divider: e.g., a value of 10 is 1/10th of G, or 0.1G. The higher this
# number, the slower that vehicles have to travel in corners. 
#
# The explanation for this formula can be found here:
# https://books.google.co.uk/books?id=NbYqQSQcE2MC&pg=PA30&lpg=PA30&dq=curve+radius+speed+limit+formula+rail&source=bl&ots=mbfC3lCnX4&sig=qClyuNSarnvL-zgOj4HlTVgYOr8&hl=en&sa=X&ei=sBGwVOSGHMyBU4mHgNAC&ved=0CCYQ6AEwATgK#v=onepage&q=curve%20radius%20speed%20limit%20formula%20rail&f=false
# The value of 10 (i.e., 0.1G) is accurate for rail for modern practice in the UK. Road appears
# to work well at 5 (0.2G), but the value is an estimate. Superelevation is not accounted for.
# Tilting trains are defined for the individual vehicles.
#
# curve_friction_factor_[way type]: The number of times extra friction that applies as a vehicle 
# corners. 
#
# tilting_min_radius_effect: The minimum radius of a corner (in meters, calibrated according
# to the meters_per_tile setting) at which a tilting train can traverse a corner faster than
# a non-tilting train. 

corner_force_divider_road=5
corner_force_divider_track=10
corner_force_divider_tram=8
corner_force_divider_monorail=10
corner_force_divider_maglev=10
corner_force_divider_narrowgauge=10

curve_friction_factor_road=0
curve_friction_factor_track=0
curve_friction_factor_tram=2
curve_friction_factor_monorail=0
curve_friction_factor_maglev=0
curve_friction_factor_narrowgauge=0

tilting_min_radius_effect=1000

# These settings determine how long that it takes a road and rail vehicles to turn
# around when it reaches the end of the line. They do not apply to boats or aircraft.
#
# "road_reverse_time_seconds" refers to road vehicles.
#
# "unit_reverse_time_seconds" refers to trains/convoys, such as multiple units, that have
# a cab at each and, and can be driven in reverse without any re-arrangement of 
# the order of the vehicles. These will generally take the least time to reverse.
#
# "hauled_reverse_time_seconds" refers to trains/convoys that cannot be driven from the
# rear, so the locomotive at the front has to run around the train and attach
# to the rear, but where that locomotive can itself be driven in either direction,
# so that it does not need to turn around.
#
# "turntable_reverse_time_seconds" refers to trains/convoys that, as for the above category,
# cannot be driven from the rear, but that also require their locomotive to be turned
# around to face the other direction (such as steam locomotives with tenders) at the
# end of the journey. These will genearlly take the most time to reverse.
#
# All times are in game seconds. In previous versions, these were specified in internal
# milliseconds by "unit_reverse_time" (etc.) without "_seconds", but these values
# had to be adjusted manually to match the meters per tile setting. The old keywords
# "(unit_reverse_time)" etc. still work, but are overridden by the "..._seconds" version
# where they are present. 

road_reverse_time_seconds=30
unit_reverse_time_seconds=60
hauled_reverse_time_seconds=120
turntable_reverse_time_seconds=360

# This setting allows the power of all vehicles to be adjusted at once. It is a
# percentage figure. Thus, if, for example, a vehicle has a power rating of 1,200kw
# and the global_power_factor_percent is set to 200, it will behave in game as if
# it had a power rating of 2,400kw. This setting is applied *in addition to* the
# "gear" setting, such that, if a vehicle had a power rating of 1,200kw, a gear of
# 2.0 and the global_power_factor_percent was set to 200, the vehicle would behave
# as if it had a total power of 4,800kw. 
#
# The force factor percent has the same effect for tractive effort. 
#
# The default is 100 (but should be set to 50% for Standard paksets
# in the case of the power factor only).

global_power_factor_percent=100
global_force_factor_percent=100

# This setting allows the way in which weight limits are enforced to be customised.
# The meanings of each setting are as follows:
# 0: weight limits are ignored entirely. 
# 1: then vehicles can travel over roads, rails, tunnels and bridges for which they are too heavy, but only at greatly reduced speed. 
# 2: Vehicles cannot travel over ways for which they are overweight at all. 
# 3: Vehciles cannot travel over ways for which they are more than 10% overweight at all, and will travel on ways for which they are up to 10% overweight at a greatly reduced speed.
#
# To revert to the behaviour of Simutrans-Standard, set enforce_weight_limits=0

enforce_weight_limits=1

# This setting controls whether players are permitted to buy vehicles after their
# retirement date. The default, allow_buying_obsolete_vehicles=1, allows players
# to buy old vehicles by clicking a "Show obsolete" button in the depot / replacer
# window. This button is not shown if this is set to 0.

allow_buying_obsolete_vehicles=1

# This allows for a "driving it off the lot" drop in value.
# This is not on by default, even in Extended.
# vehicle can loose a part of their value, when they are once used
# the loss is given in 1/1000th, i.e 300 mean the value will be 70%

used_vehicle_reduction=1

# This is the distance in meters at which train drivers can see signals ahead.
# Trains have to brake in time for signals which might be at danger, so this
# distance affects train speed. 
# 日本では視認距離を600mと定めている

sighting_distance_meters = 600

# This is the maximum speed in km/h at which rail (including narrow gauge, monorail and maglev)
# vehicles may travel in the drive by sight working method. 0 = as fast as they can
# stop within their sighting distance with no other limit.

max_speed_drive_by_sight_kmh = 40

# Corners of greater than 45 degrees have their radius calculated. However, because of 
# the rigid tile system in Simutrans, this produces unrealistic results when applied
# to corners of 45 degrees. A value is thus specified here. This affects the speed
# at which vehicles can take pairs of directionally correcting 45 degree corners
# (i.e. not a pair of 45 degree corners which between them add up to 90 degrees,
# which can be calculated more easily and are dealt with by a separate system). 
#
# If this is set to 0, pairs of self-correcting 45 degree corners are treated
#  as being straight.
# 
# For any other value, this serves as a minimum assumed radius for any given pair
# of self-correcting 45 degree corners. A calculated value will be used to work
# out what the radius of the self-correcting corners should be, but, because of 
# the rigid tile system in Simutrans, it is not possible to make gentle corners,
# so set this as a minimum to allow for this. 
#
assumed_curve_radius_45_degrees = 1000

############################### Display settings ###############################

# how long is a diagonal (512: factor 2=1024/512, old way, 724: sqrt(2)=1024/724
# THIS WILL BE ONLY USED, WHEN THIS FILE IS IN THE pakxyz/config!
diagonal_multiplier = 724

# Show info windows for private cars and pedestrians?
# (1=on, 0=off)
# 自家用車と歩行者の情報を表示するかどうか
pedes_and_car_info = 1

# Show infos on trees?
# (1=on, 0=off)
# 木の情報を表示するかどうか
tree_info = 1

# Show passenger level of townhalls?
# (1=on, 0=off)
# 役場の旅客度を表示するかどうか
townhall_info = 1

# Show infos also on bare ground?
# (1=on, 0=off)
# 地面の情報を表示するかどうか
ground_info = 1

# always open only a single info window for the ground,
# even if there are more objects on this tile
# 複数のオブジェクトが1タイル上にあったとしても、1オブジェクトのみ表示するか
only_single_info = 1

# Should stations get numbered names? (1=yes, 0=no)
# ナンバリングされた駅名を使うかどうか
numbered_stations = 0

# Show name signs and statistic?
# 0 = don't show anything
# 1 = station names
# 2 = statistics
# 3 = names and statistics
# The visual style is added to this number:
#   0 = black name in color box
#   4 = name in player color with outline
#   8 = box left of name in yellow outline
show_names = 7

# After how many months a citycar breaks (and will be forever gone) ...
# one day at current settings: 260s
# 何ヶ月後に自家用車が消滅するか
citycar_life = 1375

# Colour of the cursor shading.
# Pak128 default = 155 (orange)
# Pak128.Britain default = 158 (yellow)
# カーソルの半透明色
cursor_overlay_color = 20

################################### River settings ##################################

# rivers:
# The highest number is the smallest. A river with max_speed==0 is not navigavable by ships.
# 高い番号ほど小さい川になるよ。max_speedが0の場合は通行不可能。
river_type[0] = way_water_river1

# The number of rivers
river_number = 128

# river min length
river_min_length = 16

# river max length
river_max_length = 4096

################################### Tree settings ##################################

# These values have a substantial impact on the number of trees in the game.
# This, in turn, has a large impact on memory consumption and game performance.
# 森林・木の設定

# Number of trees on square 2 - minimal usable, 3 good, 5 very nice looking
# 1tileの中の木の本数: 2:最小, 3:良好, 5:最適
forest_no_of_trees_per_square = 5

# All following tree options are only active during map generation/extension.
# 以下の設定はマップ生成や拡張の際に使用されます

# Base forest size - minimal size of forest - map independent
# 最小の森林のサイズ: マップに依存しない
forest_base_size = 36

# Map size divisor - smaller it is the larger are individual forests
# この値を小さくするとそれぞれの森のサイズは大きくなる
forest_map_size_divisor = 64

# Forest count divisor - smaller it is, the more forest are generated
# この値が小さくなると、より多くの森が生成される
forest_count_divisor = 32

# Forest boundary sharpenss: 0 - perfectly sharp boundaries, 20 - very blurred
# 森の境界の幅 
forest_boundary_blur = 18

# Forest boundary thickness  - determines how thick will the boundary line be
# 森の境界の幅
forest_boundary_thickness = 12

# Determines how dense are spare trees going to be planted (works inversly)
# 森の密度(の逆数)
forest_inverse_spare_tree_density = 412

# climate with trees entirely (1: water, 2:desert, 4:tropic, 8:mediterran, 16:temperate, 32:tundra, 64:rocky, 128:arctic)
# zero (default) means no climate with at least one tree per tile
# 森林気候
tree_climates = 4
# 36 = 32 + 4 = tundra,tropic

# climates with no trees at all (desert and arctic at the moment)
# 非森林気候(砂漠気候+極気候)
no_tree_climates = 130

# if set, no trees will be created at all (save about 30% memory and
# the season change will be much smoother on small machines)
# 森林を生成しない
no_trees = 0

# if set, no lakes will be created at all
# 湖を生成しない
no_lakes = 1

################################### Network settings ##############################

# Most network settings are found in the base simuconf.tab

# Pakset download URL (for display on the list server)
server_pakurl = http://bridgewater-brunel.me.uk/downloads/nightly/pakset/pak128.britain-ex-nightly.tar.gz


################################### Livery settings ##################################

# These settings define livery schemes for vehicles. Each scheme can have a number
# of liveries, each with their own introduction dates. When a livery scheme is applied,
# the livery of that scheme with the latest introduction date that is not in the 
# future will be selected. The livery scheme's retirement date is the date after which
# that livery scheme can no longer be selected and applied. The retirement date is
# optional: with no retirement date specified, the livery does not retire.
#
# The following example defines two livery schemes (Yellow and Blue), each with two
# liveries (Bright-Yellow and Dark-Yellow and Navy-Blue and Royal-Blue respectively)
# with introduction dates. The default scheme will be the lowest number scheme available.
# livery_scheme[0]=JNR-bus
# retire_year[0]=1999
# retire_month[0]=1
# livery[0][0]=JNR-bus
# intro_year[0][0]=1800
# intro_month[0][0]=1

# livery_scheme[1]=Toei-bus
# retire_year[1]=2500
# retire_month[1]=1
# livery[1][0]=Toei-bus
# intro_year[1][0]=1800
# intro_month[1][0]=1